{"name": "test_vmo_login[user_cred3]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=121.0.6167.184)\nStacktrace:\n0   chromedriver                        0x000000010265e814 chromedriver + 4040724\n1   chromedriver                        0x0000000102656a18 chromedriver + 4008472\n2   chromedriver                        0x00000001022c9870 chromedriver + 284784\n3   chromedriver                        0x00000001022a4064 chromedriver + 131172\n4   chromedriver                        0x00000001023332b0 chromedriver + 717488\n5   chromedriver                        0x000000010234675c chromedriver + 796508\n6   chromedriver                        0x000000010230174c chromedriver + 513868\n7   chromedriver                        0x0000000102302044 chromedriver + 516164\n8   chromedriver                        0x0000000102623a3c chromedriver + 3799612\n9   chromedriver                        0x0000000102627f1c chromedriver + 3817244\n10  chromedriver                        0x000000010260c298 chromedriver + 3703448\n11  chromedriver                        0x0000000102628a64 chromedriver + 3820132\n12  chromedriver                        0x00000001025ff054 chromedriver + 3649620\n13  chromedriver                        0x0000000102645e74 chromedriver + 3939956\n14  chromedriver                        0x0000000102645fec chromedriver + 3940332\n15  chromedriver                        0x0000000102656698 chromedriver + 4007576\n16  libsystem_pthread.dylib             0x000000018336a034 _pthread_start + 136\n17  libsystem_pthread.dylib             0x0000000183364e3c thread_start + 8", "trace": "user_cred = {'password': ')(*&*(', 'username': '   +'}\n\n    @pytest.mark.parametrize(\"user_cred\",read_credentials_from_excel(os.getcwd()+\"/testdata1_ddt.xlsx\"))\n    def test_vmo_login(user_cred):\n            username = user_cred[\"username\"]\n            password = user_cred[\"password\"]\n            print(username, password)\n>           vmo_login(username, password)\n\ntest_01.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_01.py:30: in vmo_login\n    user_name = driver.find_element(By.ID, \"login-username\")\n../../../venv_provided/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../venv_provided/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x103a57f50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00018336a034 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000183364e3c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=121.0.6167.184)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010265e814 chromedriver + 4040724\nE       1   chromedriver                        0x0000000102656a18 chromedriver + 4008472\nE       2   chromedriver                        0x00000001022c9870 chromedriver + 284784\nE       3   chromedriver                        0x00000001022a4064 chromedriver + 131172\nE       4   chromedriver                        0x00000001023332b0 chromedriver + 717488\nE       5   chromedriver                        0x000000010234675c chromedriver + 796508\nE       6   chromedriver                        0x000000010230174c chromedriver + 513868\nE       7   chromedriver                        0x0000000102302044 chromedriver + 516164\nE       8   chromedriver                        0x0000000102623a3c chromedriver + 3799612\nE       9   chromedriver                        0x0000000102627f1c chromedriver + 3817244\nE       10  chromedriver                        0x000000010260c298 chromedriver + 3703448\nE       11  chromedriver                        0x0000000102628a64 chromedriver + 3820132\nE       12  chromedriver                        0x00000001025ff054 chromedriver + 3649620\nE       13  chromedriver                        0x0000000102645e74 chromedriver + 3939956\nE       14  chromedriver                        0x0000000102645fec chromedriver + 3940332\nE       15  chromedriver                        0x0000000102656698 chromedriver + 4007576\nE       16  libsystem_pthread.dylib             0x000000018336a034 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000183364e3c thread_start + 8\n\n../../../venv_provided/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "19efbd74-f668-44fe-8542-a9c3c24b34a4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user_cred", "value": "{'username': '   +', 'password': ')(*&*('}"}], "start": 1708258903431, "stop": 1708258905822, "uuid": "9d7a6e4e-d686-48cb-be66-a6c16467540a", "historyId": "32406d933a7ae0b425991392fa710b6b", "testCaseId": "b70ce5d0aa9f305fb235c03dcc37a507", "fullName": "tests.vmoLoginTests.ddt.test_01#test_vmo_login", "labels": [{"name": "parentSuite", "value": "tests.vmoLoginTests.ddt"}, {"name": "suite", "value": "test_01"}, {"name": "host", "value": "GaneshGrandhi.local"}, {"name": "thread", "value": "18536-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vmoLoginTests.ddt.test_01"}]}