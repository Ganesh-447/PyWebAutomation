{"name": "test_login_positive", "status": "broken", "statusDetails": {"message": "ValueError: setup did not yield a value", "trace": "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x10516fe20>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n../../../venv_provided/lib/python3.11/site-packages/_pytest/runner.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../venv_provided/lib/python3.11/site-packages/_pytest/runner.py:267: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n../../../venv_provided/lib/python3.11/site-packages/pluggy/_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n../../../venv_provided/lib/python3.11/site-packages/pluggy/_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/unraisableexception.py:85: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\n../../../venv_provided/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: in unraisable_exception_runtest_hook\n    yield\n../../../venv_provided/lib/python3.11/site-packages/_pytest/logging.py:833: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\n../../../venv_provided/lib/python3.11/site-packages/_pytest/logging.py:822: in _runtest_for\n    yield\n../../../venv_provided/lib/python3.11/site-packages/_pytest/capture.py:877: in pytest_runtest_setup\n    return (yield)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/threadexception.py:82: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\n../../../venv_provided/lib/python3.11/site-packages/_pytest/threadexception.py:63: in thread_exception_runtest_hook\n    yield\n../../../venv_provided/lib/python3.11/site-packages/_pytest/runner.py:162: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/runner.py:518: in setup\n    raise exc\n../../../venv_provided/lib/python3.11/site-packages/_pytest/runner.py:515: in setup\n    col.setup()\n../../../venv_provided/lib/python3.11/site-packages/_pytest/python.py:1834: in setup\n    self._request._fillfixtures()\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:689: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:547: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:566: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:648: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:1087: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n../../../venv_provided/lib/python3.11/site-packages/pluggy/_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n../../../venv_provided/lib/python3.11/site-packages/pluggy/_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/setuponly.py:36: in pytest_fixture_setup\n    return (yield)\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:1140: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function setup at 0x10480f2e0>\nrequest = <SubRequest 'setup' for <Function test_login_positive>>\nkwargs = {'request': <SubRequest 'setup' for <Function test_login_positive>>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: setup did not yield a value\n\n../../../venv_provided/lib/python3.11/site-packages/_pytest/fixtures.py:912: ValueError"}, "start": 1708228876540, "stop": 1708228876540, "uuid": "d514660b-6e25-4ab2-a71c-42a267a53ec4", "historyId": "31b4a765857cbcd3c91007826655742c", "testCaseId": "31b4a765857cbcd3c91007826655742c", "fullName": "tests.vmoLoginTests.pom.test_vmo_login.TestLogin#test_login_positive", "labels": [{"name": "epic", "value": "VMO Login Test"}, {"name": "feature", "value": "TC#1 - VMO App positive Test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.vmoLoginTests.pom"}, {"name": "suite", "value": "test_vmo_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "GaneshGrandhi.local"}, {"name": "thread", "value": "13049-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vmoLoginTests.pom.test_vmo_login"}]}